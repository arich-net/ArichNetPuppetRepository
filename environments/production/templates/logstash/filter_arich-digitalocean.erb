# Puppet Managed Output File
filter {
  if "apache" in [tags] {
    if [path] =~ "access" {
      mutate { 
        replace => { type => "doc" }
        add_field => { "apachetype" => "apache_access" } 
      }
      grok {
        match => { "message" => "%{COMBINEDAPACHELOG}" }
      }
      date {
        match => ["timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
      }
      geoip {
        source => 'clientip'
        target => 'geoip'
        database => '/etc/logstash/geolitecity/GeoLiteCity.dat'
        add_field => [ '[geoip][coordinates]', '%{[geoip][longitude]}' ]
        add_field => [ '[geoip][coordinates]', '%{[geoip][latitude]}'  ] 
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float"]
      }
      <% if @lookup %>      
      translate {
        field => 'request'
        dictionary_path => '/etc/logstash/lookups/lookup-<%= @lookuptable %>.yaml'
        destination => 'pagina'
        fallback => 'no-matched-pag'
        regex => true
      }
      <% end %>
    } 
    else if [path] =~ "error" {
      mutate {
        replace => { type => "doc" }
        add_field => { "apachetype" => "apache_error" } 
      }  
      grok {
        patterns_dir => "/etc/logstash/patterns"
        #match => { "message" => "\[%{CUSTOMTIMESTAMP:timestamp}\].*?pid %{NUMBER:pid}\] (?<module>[a-zA-Z_]*).*?%{IP:clientip}\:[^\:]*\: (?<details>.*)" }
        match => { "message" => "\[%{CUSTOMTIMESTAMP:timestamp}\].*?pid %{NUMBER:pid}\] (?<module>[a-zA-Z_]*).*?%{IP:clientip}\:.*?\](?<details>.*)" }
      }
      date {
        match => ["timestamp", "EEE MMM dd HH:mm:ss.SSSSSS YYYY"]
      }
      geoip {
        source => 'clientip'
        target => 'geoip'
        database => '/etc/logstash/geolitecity/GeoLiteCity.dat'
        add_field => [ '[geoip][coordinates]', '%{[geoip][longitude]}' ]
        add_field => [ '[geoip][coordinates]', '%{[geoip][latitude]}'  ] 
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float"]
      }
    }
    else {
      mutate {
        replace => { type => "random_logs" }
      }
    }
  }
  else if "syslog" in [tags] {
    mutate {
      replace => { type => "syslog_data" }    
    }
    grok {
      break_on_match => true
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" =>  [
        "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} (?<module>[\w]*)\[(?<PID>[0-9]*)\]: (?<message>.*?sshd.*?rhost=(%{IP:remoteIP}).*)",
        "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} (?<module>[\w]*)\[(?<PID>[0-9]*)\]: (?<message>.*?(?i)from(?-i).*?(%{IP:remoteIP}).*)",
        "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} (?<module>[\w]*)\[(?<PID>[0-9]*)\]: (?<message>.*)"
      ] }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{hostname}" ]
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    geoip {
      source => 'remoteIP'
      target => 'geoip'
      database => '/etc/logstash/geolitecity/GeoLiteCity.dat'
      add_field => [ '[geoip][coordinates]', '%{[geoip][longitude]}' ]
      add_field => [ '[geoip][coordinates]', '%{[geoip][latitude]}'  ] 
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }
  }
  else {
    mutate {
      replace => { type => "random_logs" }
    }
  }
}
