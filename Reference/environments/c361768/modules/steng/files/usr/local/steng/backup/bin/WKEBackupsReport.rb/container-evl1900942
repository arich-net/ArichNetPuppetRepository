#!/usr/bin/env ruby
#Version: 1.0
#Created By: Storage Engineering - 2014/04/28
#Modified by:
#Changelog:
#V1.0 First review
#usage: ./WKEBackupsReport.rb MailAddress InputPath [OutputPath]
#Sends a report with a variable sujbect depending on the result of the performed checks:
#1-All ok
#2-there are jobs scheduled but not executed in the last 24 hours and/or failed jobs over last 24h and/or job still running 

require 'date'

#tiempo
tiempo = Time.new
epochtiempo = tiempo.to_i
month = tiempo.strftime('%m')
day = tiempo.strftime('%d')
tiempo2 = DateTime.now - 1
yesterday = tiempo2.strftime('%d')
yesterdaymonth = tiempo2.strftime('%m')
yesterdayyear = tiempo2.strftime('%Y')

#time window parameter
hoursback = 24
secondsback = hoursback.to_i * 3600
timethreshold = epochtiempo - secondsback.to_i

#maps declaration
running = Hash.new
failed = Hash.new

#commands
report = `/usr/openv/netbackup/bin/admincmd/bpdbjobs -gdm`

#input/output path
in_path = ARGV[1]
out_path = ARGV[2]
if out_path == nil
	out_path = in_path
end

#output_file
output_file = File.new("/#{in_path}/#{tiempo.year}#{month}#{day}-Errors.csv", "w")

require 'socket'
host = Socket.gethostname
jobsfailure = 0
schedulefailure = 0
jobsactive = 0

#checks address and input file presence
#check scheduler issues
address = ARGV[0]
if address.include? "@"
        if File.directory?(in_path)
			if File.exist?("#{in_path}/#{yesterdayyear}#{yesterdaymonth}#{yesterday}-JobList.csv")
				if File.directory?(out_path)
					command = `/usr/local/steng/backup/bin/ExecutedVSProgrammedJobs.rb /#{in_path}`
					if "#{command}" != ""
						schedulefailure = 1
						output_file.puts("POLITICAS PROGRAMADAS PERO NO EJECUTADAS EN LAS ULTIMAS 24H")
						output_file.puts("POLICY,CLIENT")
						output_file.puts("#{command}")
					end
				else
					puts "ERROR : THE OUTPUT PATH DOES NOT EXIST"
					mail = `echo "ERROR : THE OUTPUT PATH DOES NOT EXIST"  | mailx -s "#{host} - WKE Daily Backup Review for day #{tiempo.year}#{month}#{day}" -r "#{host}@#{host}.eu.verio.net" #{address}`
				end
			else
				puts "ERROR : THE INPUT FILE DOES NOT EXIST"
				mail = `echo "ERROR : THE INPUT FILE DOES NOT EXIST"  | mailx -s "#{host} - WKE Daily Backup Review for day #{tiempo.year}#{month}#{day}" -r "#{host}@#{host}.eu.verio.net" #{address}`
			end
		else
			puts "ERROR : THE INPUT PATH DOES NOT EXIST"
			mail = `echo "ERROR : THE INPUT PATH DOES NOT EXIST"  | mailx -s "#{host} - WKE Daily Backup Review for day #{tiempo.year}#{month}#{day}" -r "#{host}@#{host}.eu.verio.net" #{address}`
        end
else
        puts "ERROR : THE MAIL ADDRESS IS INCORRECT"
end

#create maps 
report.each {|linea|
	linea.chop!
	field = linea.split(",")
	job_id = field[0]
	job_status = field[3]
	job_policy = field[4]
	job_schedule = field[5]
	job_client = field[6]
	start_time = field[8]
	end_time = field[10]
	human_start_time = `date -d @#{start_time}`
	human_start_time.strip!
	human_end_time = `date -d @#{end_time}`
	human_end_time.strip!
	if (job_status == "") && (end_time == "0000000000") && (job_schedule != "")
		jobsactive = 1
		running[[job_policy,job_schedule,job_client,human_start_time]] = 1
	elsif end_time.to_i >= timethreshold
		if job_status.to_i > 0
			if failed[[job_policy,job_schedule,job_client,job_status,human_start_time,human_end_time]].to_i < end_time.to_i
				failed[[job_policy,job_schedule,job_client,job_status,human_start_time,human_end_time]] = end_time.to_i
				jobsfailure = 1
			end
		end
	end
}

#create mail for no problems
if jobsfailure == 0 && schedulefailure == 0 && jobsactive == 0
	output_file.close
	mail = `echo "#{day}/#{month}/#{tiempo.year} - Todo OK."  | mailx -s "#{host} - Backup OK" -r "#{host}@#{host}.eu.verio.net" #{address}`
else
	#failed jobs part
	if jobsfailure == 1
		output_file.puts("JOBS FALLADOS EN LAS ULTIMAS 24 HORAS")
		output_file.puts("POLITICA,SCHEDULE,CLIENTE,EXIT STATUS,START TIME,END TIME")
		failed.each {|key, value|
			output_file.puts("#{key[0]},#{key[1]},#{key[2]},#{key[3]},#{key[4]},#{key[5]}")
		}
	elsif jobsfailure == 0
		output_file.puts("NO HAY JOBS FALLADOS EN LAS ULTIMAS 24 HORAS")
	end
	#running jobs part
	if jobsactive == 1
		output_file.puts("JOBS ACTUALMENTE ACTIVOS")
		output_file.puts("POLITICA,SCHEDULE,CLIENTE,START TIME")
		running.each {|key, value|
			output_file.puts("#{key[0]},#{key[1]},#{key[2]},#{key[3]}")
		}
	elsif jobsactive == 0
		output_file.puts("NO HAY JOBS ACTIVOS EN ESTE MOMENTO")
	end	
output_file.close
mail = `echo "Hay errores en el backup de WKE. 
Revisar el file csv adjunto para mas detalles."  | mailx -s "#{host} - Backup FAILED" -r "#{host}@#{host}.eu.verio.net" -a /#{in_path}/#{tiempo.year}#{month}#{day}-Errors.csv #{address}`
end

third = `/usr/local/steng/backup/bin/JobsConfiguredNextDay.rb /#{out_path}`
system("#{third}")
system("#{mail}")