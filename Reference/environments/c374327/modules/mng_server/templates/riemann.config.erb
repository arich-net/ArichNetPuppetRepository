; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init :file "/var/log/riemann/riemann.log")

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "<%= @bind %>"]
  (tcp-server :host host)
  (udp-server :host host)
  (ws-server  :host host)
  (repl-server :host host))

; Expire old events from the index every 10 seconds.
(periodically-expire 10)

; Keep events in the index for 5 minutes by default.
(let [index (default :ttl 300 (update-index (index)))]

  ; Inbound events will be passed to these streams:
  (streams

    ; Index all events immediately.
    index

    ; Calculate an overall rate of events.
    (with {:metric_f 1 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))

    (where (service #"^per")
      (percentiles 5 [0 0.5 0.95 0.99 1]
        index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))
))

(ns riemann.pagerduty)
(def ^:private event-url
  "http://<%= @django_host %>/api/generic/2010-04-15/create_event.json")
(ns riemann.config)

(let [pd (pagerduty "riemann")]
  (streams
    (changed-state
      (where (or (state "critical") (state "unknown"))
        (:trigger pd)))))

(def graph (graphite {:host "<%= @graphite_host %>"}))
(streams graph)

; logging sample, uncomment and restart riemann if you want it to be used
;(streams
;  (where (service "server.host.server.cpu_usage.last_minute")
;    ; Log event to the console
;    #(info %)))
